[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "gpt-oss-red-team-testbed"
version = "1.1.0"
description = "Red-teaming testbed for OpenAI's GPT-OSS-20B model competition"
authors = [
    {name = "Red Team Testbed Contributors"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
keywords = ["red-team", "ai-safety", "llm", "security", "vulnerability-testing"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Security",
]

dependencies = [
    "requests>=2.31.0",
    "pyyaml>=6.0",
    "pydantic>=2.10.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "streamlit>=1.28.0",
    "flask>=2.3.0",
    "jupyter>=1.0.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "plotly>=5.17.0",
    "textstat>=0.7.3",
    "colorama>=0.4.6",
    "tqdm>=4.65.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-cov>=6.0.0",
    "pre-commit>=3.8.0",
    "ruff>=0.8.0",
    "ty>=0.0.1a0",
]

[project.urls]
Homepage = "https://github.com/quesma/red-team-testbed-for-gpt-oss"
Repository = "https://github.com/quesma/red-team-testbed-for-gpt-oss"
Documentation = "https://github.com/quesma/red-team-testbed-for-gpt-oss/blob/main/README.md"
Issues = "https://github.com/quesma/red-team-testbed-for-gpt-oss/issues"

[project.scripts]
setup = "src.cli.setup:main"
pentest = "src.cli.pentest:main"
review = "src.cli.review:main"
findings = "src.cli.findings:main"
report = "src.cli.report:main"
help = "src.cli.help:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py312"
src = ["src"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
    "I",    # isort
    "TCH",  # flake8-type-checking
    "ANN",  # flake8-annotations
]
ignore = [
    "E501",  # line too long - handled by formatter
]

[tool.ruff.lint.isort]
known-first-party = ["categories", "utils", "ui"]

# Type checking is handled by ruff with type annotations

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.9",
    "ty>=0.0.1a18",
]

# Development tools are managed in [project.optional-dependencies] above
