[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "gpt-oss-red-team-testbed"
version = "1.0.0"
description = "Red-teaming testbed for OpenAI's GPT-OSS-20B model competition"
authors = [
    {name = "Red Team Testbed Contributors"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
keywords = ["red-team", "ai-safety", "llm", "security", "vulnerability-testing"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Security",
]

dependencies = [
    "requests>=2.31.0",
    "pyyaml>=6.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "streamlit>=1.28.0",
    "flask>=2.3.0",
    "jupyter>=1.0.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "plotly>=5.17.0",
    "textstat>=0.7.3",
    "colorama>=0.4.6",
    "tqdm>=4.65.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/gpt-oss-red-team-testbed"
Repository = "https://github.com/your-org/gpt-oss-red-team-testbed"
Documentation = "https://github.com/your-org/gpt-oss-red-team-testbed/blob/main/README.md"
Issues = "https://github.com/your-org/gpt-oss-red-team-testbed/issues"

[project.scripts]
testbed = "testbed:cli"
red-team = "testbed:cli"
gpt-oss-test = "testbed:cli"

[tool.hatch.build.targets.wheel]
packages = ["utils", "categories", "ui"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Exclude generated files
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.nox
  | \.pants.d
  | \.pyc
  | \.pyo
  | \.ruff_cache
  | \.tox
  | \.venv
  | __pycache__
  | _build
  | buck-out
  | build
  | dist
  | node_modules
  | venv
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["utils", "categories", "ui"]
known_third_party = ["click", "yaml", "requests", "rich", "streamlit", "flask", "jupyter", "numpy", "pandas", "plotly"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "yaml",
    "requests.*",
    "streamlit.*",
    "plotly.*",
    "textstat.*",
    "tqdm.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["utils", "categories", "ui", "testbed"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
    "setup.py",
    "generate_example.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]